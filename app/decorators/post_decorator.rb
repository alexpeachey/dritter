class PostDecorator < ApplicationDecorator
  decorates :post

  def user
    UserDecorator.new(model.user)
  end
  
  def display_name
    user.display_name
  end
  
  def avatar
    user.avatar
  end
  
  def content
    if model.created_at >= 5.minutes.ago
      h.content_tag(:span, "NEW", class: 'label success') + model.content
    else
      model.content
    end
  end
  
  def occured
    h.time_ago_in_words(model.created_at) + " ago"
  end

  private
  def time_of_last_read
    time = h.request.cookies["last_read"]
    time = Time.at(time.to_i) if time.present?
    time ||= Time.now
  end

  # Accessing Helpers
  #   You can access any helper via a proxy
  #
  #   Normal Usage: helpers.number_to_currency(2)
  #   Abbreviated : h.number_to_currency(2)
  #   
  #   Or, optionally enable "lazy helpers" by calling this method:
  #     lazy_helpers
  #   Then use the helpers with no proxy:
  #     number_to_currency(2)

  # Defining an Interface
  #   Control access to the wrapped subject's methods using one of the following:
  #
  #   To allow only the listed methods (whitelist):
  #     allows :method1, :method2
  #
  #   To allow everything except the listed methods (blacklist):
  #     denies :method1, :method2

  # Presentation Methods
  #   Define your own instance methods, even overriding accessors
  #   generated by ActiveRecord:
  #   
  #   def created_at
  #     h.content_tag :span, time.strftime("%a %m/%d/%y"), 
  #                   :class => 'timestamp'
  #   end
end